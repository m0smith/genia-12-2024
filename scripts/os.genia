TRUE = 1 == 1
FALSE = 1 == 2


fn reduce(f, acc) -> fn(list) -> reduce(f, acc, list)
fn reduce(_, acc, []) -> acc
fn reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

fn count([]) -> 0
fn count(list) -> reduce(fn (acc, _) -> acc + 1, 0, list)

fn filter(f) -> fn(list) -> filter(f, list)
fn filter(_, []) -> []
fn filter(pred, list) -> reduce(fn (acc, el) when pred(el) -> [..acc, el] | (acc, _) -> acc, [], list)
fn not(v) when v -> FALSE | (_) -> TRUE

fn grep (regex)                 -> (fn(list)    -> grep(regex, TRUE, list))
    |   (regex, rtnval)         -> (fn(list)    -> grep(regex, rtnval, list))
    |   (regex, rtnval, seq)    ->  filter(
                fn    (el) when el ~ regex     -> rtnval 
                    | (_)                      -> not(rtnval),
                    seq)




fn rcompose () -> (fn(x) -> x) 
    | (f) -> (fn(x) -> f(x))
    | (f, g) -> (fn(x) -> g(f(x)))
    | (f, g, h) -> (fn(x) -> h(g(f(x))))
    | (f, g, h, i) -> (fn(x) -> i(h(g(f(x)))))

f = find_files(".")
count(f)
ff = rcompose(
    grep(".*/[.]git/.*", FALSE),
    grep(".*/[.]vscode/.*", FALSE),
    grep(".*/[.].*", FALSE),
    grep(".*/.*[.]genia")
) 
filtered = ff(f)
print(count(filtered))
    

[a,b,c] = f
print(a,b,c)

[a,b,c,d,d2,d3] = filtered
print(a,b,c,d,d2,d3)
print(count(f))
