define set_board(b, i, v) -> foreign "genia.hosted.tictactoe.set_board"
define input(prompt) -> foreign "builtins.input"
define int(s) -> foreign "builtins.int"

TRUE  = 1 == 1
FALSE = 1 == 2

define equal?(x) -> define(y) -> x == y
    | (x, y) -> x == y
define equal?(a,b,c) when a == b -> b == c
define equal?(a,b,c) -> FALSE
define equal?(a,b,c,d) when a == b -> equal?(b,c,d)
define equal?(a,b,c,d) -> FALSE

define nequal?(x) -> define(y) -> x != y

define every?(pred) -> define(list) -> every?(pred, list)
define every?(_, []) -> TRUE
define every?(pred, [head, ..tail]) when pred(head) -> every?(pred, tail)
define every?(pred, [head, ..tail]) -> FALSE

define any?(pred) -> define(list) -> any?(pred, list)
define any?(_, []) -> FALSE
define any?(pred, [head, .._]) when pred(head) -> TRUE
define any?(pred, [head, ..tail]) -> any?(pred, tail)

define reduce(f, acc) -> define(list) -> reduce(f, acc, list)
define reduce(_, acc, []) -> acc
define reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

define map(f) -> define(lst) -> map(f, lst)
define map(_, []) -> []
    | (f, [h, ..r]) -> [f(h), ..map(f, r)]

define map(_, [], _) -> []
    | (_, _, []) -> []
    | (f, [h, ..r], [h2, ..r2]) -> [f(h, h2), ..map(f, r, r2)]

define add()  -> 0
define add(x) -> x | (x, y) -> x + y

print(map(add, [1]))
print(map(add, [1,2,3], [10,11,12]))

define constantly(v) -> define(_) -> v 

define interpose(_, [])             -> []
define interpose(_, [h])            -> [h]
define interpose(item, [hf, ..r])   -> reduce(define(acc, el) -> [..acc, item, el], [hf], r)

define duplicates(value, n) -> map(constantly(value), 1..n)

define Trio = Trio(a,b,c)

define board_full?([.._, " ", .._]) -> FALSE | (_) -> TRUE

define create-board() -> duplicates(" ", 9)

define as-trio() -> 0..7
define as-trio(b) -> define(n) -> as-trio(b, n)
define as-trio
    ([a,b,c, .._], 0) -> Trio(a,b,c) 
    | ([ _,_,_,
        a,b,c, 
        .._], 1)        -> Trio(a,b,c) 
    | ([_,_,_,
        _,_,_,
        a,b,c], 2)      -> Trio(a,b,c) 
    | ([a,_,_,
        b,_,_,
        c,_,_], 3)      -> Trio(a,b,c) 
    | ([_,a,_,
        _,b,_,
        _,c,_], 4)      -> Trio(a,b,c) 
    | ([_,_,a,
        _,_,b,
        _,_,c], 5)      -> Trio(a,b,c) 
    | ([_,_,a,
        _,b,_,
        c,_,_], 6)      -> Trio(a,b,c) 
    | ([a,_,_,
        _,b,_,
        _,_,c], 7)      -> Trio(a,b,c) 

define trios(board) -> map(as-trio(board), as-trio())

define printer(Trio(a, b, c)) -> print(a + "|" + b  + "|" + c)
define printer(board) -> 
(
    print("");
    printer(as-trio(board, 0));
    print("-+-+-");
    printer(as-trio(board, 1));
    print("-+-+-");
    printer(as-trio(board, 2));
)

define check-win(p) -> define(t) -> check-win(t, p)
define check-win(Trio(a, b, c), p) -> equal?(p, a, b, c) 
define check-win(board, p) ->
(
    any?(
        check-win(p), 
        trios(board))
)
board = create-board()

define switch("X") -> "O" | (_) -> "X"

define game*
      (p) when check-win(board, p) 
        ->  print("Player " + p + " wins!")

    | (p) when check-win(board, switch(p)) 
        ->  print("Player " + switch(p) + " wins!")

    | (p) when board_full?(board) 
        ->  print("It's a draw!")

    | (p) -> (
        idx = int(input("Player " + p + " (0-8): "));
        ok = set_board(board, idx, p);
        game(switch(p))
    )

define game(p) -> (
    printer(board);
    game*(p)
)
game("X")
