fn set_board(b, i, v) -> foreign "genia.hosted.tictactoe.set_board"
fn input(prompt) -> foreign "builtins.input"
fn int(s) -> foreign "builtins.int"

TRUE  = 1 == 1
FALSE = 1 == 2

fn equal?(x) -> fn(y) -> x == y
    | (x, y) -> x == y
fn equal?(a,b,c) when a == b -> b == c
fn equal?(a,b,c) -> FALSE
fn equal?(a,b,c,d) when a == b -> equal?(b,c,d)
fn equal?(a,b,c,d) -> FALSE

fn nequal?(x) -> fn(y) -> x != y

fn every?(pred) -> fn(list) -> every?(pred, list)
fn every?(_, []) -> TRUE
fn every?(pred, [head, ..tail]) when pred(head) -> every?(pred, tail)
fn every?(pred, [head, ..tail]) -> FALSE

fn any?(pred) -> fn(list) -> any?(pred, list)
fn any?(_, []) -> FALSE
fn any?(pred, [head, .._]) when pred(head) -> TRUE
fn any?(pred, [head, ..tail]) -> any?(pred, tail)

fn reduce(f, acc) -> fn(list) -> reduce(f, acc, list)
fn reduce(_, acc, []) -> acc
fn reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

fn map(f) -> fn(lst) -> map(f, lst)
fn map(_, []) -> []
    | (f, [h, ..r]) -> [f(h), ..map(f, r)]

fn map(_, [], _) -> []
    | (_, _, []) -> []
    | (f, [h, ..r], [h2, ..r2]) -> [f(h, h2), ..map(f, r, r2)]

fn add()  -> 0
fn add(x) -> x | (x, y) -> x + y

print(map(add, [1]))
print(map(add, [1,2,3], [10,11,12]))

fn constantly(v) -> fn(_) -> v 

fn interpose(_, [])             -> []
fn interpose(_, [h])            -> [h]
fn interpose(item, [hf, ..r])   -> reduce(fn(acc, el) -> [..acc, item, el], [hf], r)

fn duplicates(value, n) -> map(constantly(value), 1..n)

data Player = X | Y

data Pos = Player | A(label)

data Trio = Trio(a,b,c)

fn board_full?([.._, " ", .._]) -> FALSE | (_) -> TRUE

fn create-board() -> duplicates(" ", 9)

fn as-trio() -> 0..7
fn as-trio(b) -> fn(n) -> as-trio(b, n)
fn as-trio
    ([a,b,c, .._], 0) -> Trio(a,b,c) 
    | ([ _,_,_,
        a,b,c, 
        .._], 1)        -> Trio(a,b,c) 
    | ([_,_,_,
        _,_,_,
        a,b,c], 2)      -> Trio(a,b,c) 
    | ([a,_,_,
        b,_,_,
        c,_,_], 3)      -> Trio(a,b,c) 
    | ([_,a,_,
        _,b,_,
        _,c,_], 4)      -> Trio(a,b,c) 
    | ([_,_,a,
        _,_,b,
        _,_,c], 5)      -> Trio(a,b,c) 
    | ([_,_,a,
        _,b,_,
        c,_,_], 6)      -> Trio(a,b,c) 
    | ([a,_,_,
        _,b,_,
        _,_,c], 7)      -> Trio(a,b,c) 

fn trios(board) -> map(as-trio(board), as-trio())

fn printer(Trio(a, b, c)) -> print(a + "|" + b  + "|" + c)
fn printer(board) -> 
(
    print("");
    printer(as-trio(board, 0));
    print("-+-+-");
    printer(as-trio(board, 1));
    print("-+-+-");
    printer(as-trio(board, 2));
)

fn check-win(p) -> fn(t) -> check-win(t, p)
fn check-win(Trio(a, b, c), p) -> equal?(p, a, b, c) 
fn check-win(board, p) ->
(
    any?(
        check-win(p), 
        trios(board))
)
board = create-board()

fn switch("X") -> "O" | (_) -> "X"

fn game*(p) when check-win(board, p) 
    ->  print("Player " + p + " wins!")

fn game*(p) when check-win(board, switch(p)) 
    ->  print("Player " + switch(p) + " wins!")

fn game*(p) when board_full?(board) 
    ->  print("It's a draw!")

fn game*(p) -> (
    idx = int(input("Player " + p + " (0-8): "));
    ok = set_board(board, idx, p);
    game(switch(p))
)

fn game(p) -> (
    printer(board);
    # print("game check-win X", check-win(board, "X"));
    # print("game check-win O", check-win(board, "O"));
    game*(p)
)
game("X")
