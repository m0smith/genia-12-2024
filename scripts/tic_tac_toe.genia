fn set_board(b, i, v) -> foreign "genia.hosted.tictactoe.set_board"
fn check_win(b, p) -> foreign "genia.hosted.tictactoe.check_win"
fn input(prompt) -> foreign "builtins.input"
fn int(s) -> foreign "builtins.int"

TRUE  = 1 == 1
FALSE = 1 == 2

fn equal?(x) -> fn(y) -> x == y
    | (x, y) -> x == y

fn nequal?(x) -> fn(y) -> x != y

fn every?(pred) -> fn(list) -> every?(pred, list)
fn every?(_, []) -> TRUE
fn every?(pred, [head, ..tail]) when pred(head) -> every?(pred, tail)
fn every?(pred, [head, ..tail]) -> FALSE

fn reduce(f, acc) -> fn(list) -> reduce(f, acc, list)
fn reduce(_, acc, []) -> acc
fn reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

fn duplicates(value, n) -> reduce(fn(acc, _) -> [..acc, value], [], 1..n)

fn board_full?(board) -> every?(nequal?(" "), board)

fn create_board() -> duplicates(" ", 9)


fn print_board(
    [b0 b1 b2 
     b3 b4 b5 
     b6 b7 b8]) -> (
    print("");
    print(b0 + "|" + b1  + "|" + b2);
    print("-+-+-");
    print(b3 + "|" + b4  + "|" + b5);
    print("-+-+-");
    print(b6 + "|" + b7  + "|" + b8)
)


board = create_board()

fn switch("X") -> "O" | (_) -> "X"

fn game(p) when check_win(board, p) -> (
    print_board(board);
    print("Player " + p + " wins!")
)
fn game(p) when check_win(board, switch(p)) -> (
    print_board(board);
    print("Player " + switch(p) + " wins!")
)
fn game(p) when board_full?(board) -> (
    print_board(board);
    print("It's a draw!")
)
fn game(p) -> (
    print_board(board);
    idx = int(input("Player " + p + " (0-8): "));
    ok = set_board(board, idx, p);
    game(switch(p))
)
game("X")
