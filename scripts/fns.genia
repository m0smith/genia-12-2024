TRUE = 1 == 1
FALSE = 1 == 2

fn reduce(f, acc) -> fn(list) -> reduce(f, acc, list)
fn reduce(_, acc, []) -> acc
fn reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

fn map(f) -> fn(list) -> map(f, list)
fn map(_, []) -> []
fn map(func, list) -> reduce(fn (acc, el) -> [..acc, func(el)], [], list)

fn filter(f) -> fn(list) -> filter(f, list)
fn filter(_, []) -> []
fn filter(pred, list) -> reduce(fn (acc, el) when pred(el) -> [..acc, el] | (acc, _) -> acc, [], list)

fn reverse() -> fn(list) -> reverse(list)
fn reverse([]) -> []
fn reverse(list) -> reduce(fn (acc, el) -> [el, ..acc], [], list)

fn compose(f) -> fn(x) -> f(x)
fn compose(f, g) -> fn(x) -> f(g(x))
fn compose(f, g, h) -> fn(x) -> f(g(h(x)))

fn any?(pred) -> fn(list) -> any?(pred, list)
fn any?(_, []) -> FALSE
fn any?(pred, [head, ..tail]) when pred(head) -> TRUE
fn any?(pred, [head, ..tail]) -> any?(pred, tail)

fn every?(pred) -> fn(list) -> every?(pred, list)
fn every?(_, []) -> TRUE
fn every?(pred, [head, ..tail]) when pred(head) -> every?(pred, tail)
fn every?(pred, [head, ..tail]) -> FALSE

fn invert(pred) -> fn(x) when pred(x) -> FALSE | (x) -> TRUE

fn equal? (x) -> fn(y) -> x == y
    | (x, y) -> x == y

fn distinct() -> []
fn distinct([]) -> []
fn distinct(list) -> distinct([], list)
fn distinct(seen, []) -> []
fn distinct(seen, [head, ..tail]) when any?(equal?(head), seen) -> distinct(seen, tail)
fn distinct(seen, [head, ..tail]) -> [head, ..distinct([head, ..seen], tail)]

fn distinct2() -> []
fn distinct2([]) -> []
fn distinct2([head, ..tail]) -> [head, ..distinct(filter(invert(equal?(head)), tail))]

fn add(x, y) -> x + y
fn double(x) -> x + x
fn pos?(x) -> x > 0

print("Sum of numbers from 1 to 3: ", reduce(add, 0 1..3))
print("Double the numbers from 10 to 20: ", map(double, 10..20))
print("Only the positive numbers from -10 to 10:", filter(pos?, -10..10))
double_pos = compose(
    reverse,
    map(double),
    filter(pos?)
)
print("Double and reverse the positive numbers from -10 to 10:" , double_pos(-10..10))

print("Any pos in negative list?", any?(pos?, -10..-1))
print("Any pos in positive list?", any?(pos?, -10..12))

print("Distinct empy list", distinct2([]))
print("Distinct all ones list", distinct2([1,1,1,1,1,1,1]))
print("Distinct all ones and 'one's list", distinct2([1,1,1,1,1,1,1, "one"]))

print("invert neg numbers are invert pos?", filter(invert(pos?), -10..10))