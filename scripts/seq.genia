TRUE = 1 == 1
FALSE = 1 == 2

define reduce(f, acc) -> define(list) -> reduce(f, acc, list)
define reduce(_, acc, []) -> acc
define reduce(func, acc, [f, ..r]) -> reduce(func, func(acc, f), r)

define count([]) -> 0
define count(list) -> reduce(define (acc, _) -> acc + 1, 0, list)

define map(f) -> define(list) -> map(f, list)
define map(_, []) -> []
define map(func, list) -> reduce(define (acc, el) -> [..acc, func(el)], [], list)

define filter(f) -> define(list) -> filter(f, list)
define filter(_, []) -> []
define filter(pred, list) -> reduce(define (acc, el) when pred(el) -> [..acc, el] | (acc, _) -> acc, [], list)

define take(_, []) -> []
define take (n, seq) -> reduce(define (acc, el) when count(acc) < n -> [..acc, el] | (acc, _) -> acc, [], seq)
define take(n) -> define(seq) -> take(n, seq)

define reverse() -> define(list) -> reverse(list)
define reverse([]) -> []
define reverse(list) -> reduce(define (acc, el) -> [el, ..acc], [], list)

define any?(pred) -> define(list) -> any?(pred, list)
define any?(_, []) -> FALSE
define any?(pred, [head, ..tail]) when pred(head) -> TRUE
define any?(pred, [head, ..tail]) -> any?(pred, tail)

define every?(pred) -> define(list) -> every?(pred, list)
define every?(_, []) -> TRUE
define every?(pred, [head, ..tail]) when pred(head) -> every?(pred, tail)
define every?(pred, [head, ..tail]) -> FALSE

define interpose(_, [])             -> []
define interpose(_, [h])            -> [h]
define interpose(item, [hf, ..r])   -> reduce(define(acc, el) -> [..acc, item, el], [hf], r)

define interleve(l) -> l
define interleve(l1, l2) -> interleve(l1, l2, [])
define interleve([], _, acc) -> reverse(acc)
    | (_, [], acc) -> reverse(acc)
    | ([h1, ..r1], [h2, ..r2], acc) -> interleve(r1, r2, [h2, h1, ..acc])
define interleve(l1, l2, l3) -> interleve(l1, l2, l3, [])
define interleve([], _, _, acc) -> reverse(acc)
    | (_, [], _, acc) -> reverse(acc)
    | (_, _, [], acc) -> reverse(acc)
    | ([h1, ..r1], [h2, ..r2], [h3, ..r3], acc) -> interleve(r1, r2, r3, [h3, h2, h1, ..acc])
define interleve(l1, l2, l3, l4) -> interleve(l1, l2, l3, l4, [])
define interleve([], _, _, _, acc) -> reverse(acc)
    | (_, [], _, _, acc) -> reverse(acc)
    | (_, _, [], _, acc) -> reverse(acc)
    | (_, _, _, [], acc) -> reverse(acc)
    | ([h1, ..r1], [h2, ..r2], [h3, ..r3], [h4, ..r4], acc) -> interleve(r1, r2, r3, r4, [h4, h3, h2, h1, ..acc])

define distinct() -> []
define distinct([]) -> []
define distinct(list) -> distinct(list, [])
define distinct([], acc) -> reverse(acc)
define distinct([head, ..tail], acc) when any?(equal?(head), acc) -> distinct(tail, acc)
define distinct([head, ..tail], acc) -> distinct(tail, [head, ..acc])

define nequal?(v) -> define(y) -> v != y

define distinct2() -> []
define distinct2([]) -> []
define distinct2(list) -> distinct2(list, [])
define distinct2([], acc) -> reverse(acc)
    | ([head, ..tail], acc) -> distinct2(filter(nequal?(head), tail), [head, ..acc])


define inc(i) -> i + 1
define iterate(f, v) -> delayseq(v, delay(iterate(f, f(v))))
define numbers () -> iterate(inc, 1)
[a,b,c] = numbers()
print(a)  // prints 1
print(b)  // prints 2
print(c)  // prints 3

define add(x, y) -> x + y
define double(x) -> x + x
define pos?(x) -> x > 0
define npos?(x) -> x <= 0

ls = lazyseq([1,2,3])

print("Sum of numbers from 1 to 3: ", reduce(add, 0 1..3))
print("Double the numbers from 10 to 20: ", map(double, 10..20))
print("Only the positive numbers from -10 to 10:", filter(pos?, (-10)..10))

define double_pos(coll) ->
    reverse(map(double, filter(pos? coll)))

print("Double and reverse the positive numbers from -10 to 10:" , double_pos((-10)..10))

print("Any pos in negative list?", any?(pos?, (-10)..-1))
print("Any pos in positive list?", any?(pos?, (-10)..12))

print("Distinct empy list", distinct2([]))
print("Distinct all ones list", distinct2([1,1,1,1,1,1,1]))
print("Distinct all ones and 'one's list", distinct2([1,1,1,1,1,1,1, "one"]))

print("invert neg numbers are invert pos?", filter(npos?, (-10)..10))
print("Count of list [1,2,3] => ", count([1,2,3]))
print("Take 2 from list [1,2,3] => ", take(2, [1,2,3]))
print("Count lazyseq", count(ls))
